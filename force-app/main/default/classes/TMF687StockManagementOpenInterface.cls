global with sharing class TMF687StockManagementOpenInterface { //extends vlocity_cmt.VlocityOpenInterface2 {
    public TMF687StockManagementOpenInterface() {

    }

    /**
     * The entry method for any class implementing Vlocity Open Interface (VOI). 
     * To be able to call Apex method from an Omniscript (via a Remote Action) - the class should implement VOI.
     *
     * @param {String} methodName - name of the invoked method
     * @param {Map<String, Object>} inputMap - input parameters in the form of key-value pairs
     * @param {Map<String, Object>} outputMap - output generated by the class in the form of key-value pairs
     * @param {Map<String, Object>} optionsMap - options parameters in the form of key-value pairs (sort of similar to input)
     * @return {nothing}
     *
     * @example
     *     TBD
     */
    global Boolean invokeMethod(String methodName, Map<String, Object> inputMap, Map<String, Object> outputMap, Map<String, Object> optionsMap) {
        Boolean result = true;

        System.debug(LoggingLevel.ERROR, 'OtterTools > VlocityOpenInterfaceBoilerplate > invokeMethod: methodName: ' + methodName);
        System.debug(LoggingLevel.ERROR, 'OtterTools > VlocityOpenInterfaceBoilerplate > invokeMethod: inputMap: ' + inputMap);

        //routing to a method that actually implement business logic
        if (methodName.equals('POST_reserveProductStock')) {
            TMF687StockManagementOpenInterface.POST_reserveProductStock(inputMap, outputMap, optionsMap);
            return true;
        }

        /* if (methodName.equals('functionB')) {
            TMF687StockManagementOpenInterface.functionB(inputMap, outputMap, optionsMap);
            return result;
        }  */
        
        return result;
    }

    public static void POST_reserveProductStock (Map<String, Object> inputMap, Map<String, Object> outputMap, Map<String, Object> optionsMap) {
        //retrieve input values from the input map
        final String RECORD_ID_KEY = 'recordId';        
        String recordId = (String) inputMap.get(RECORD_ID_KEY);
        
        if (String.isBlank(recordId)) {

            String message = 'Input value (' + RECORD_ID_KEY + ') is empty';
            System.debug(LoggingLevel.ERROR, 'OtterTools > VlocityOpenInterfaceBoilerplate > POST_reserveProductStock: ' + message);

            outputMap.put('status', 'FAILED');
            outputMap.put('message', message);
            return;
        }

        System.debug(LoggingLevel.INFO, 'OtterTools > VlocityOpenInterfaceBoilerplate > POST_reserveProductStock: input value ' + '(' + RECORD_ID_KEY + '): ' + recordId);

        /**************** BUSINESS LOGIC HERE **************/

        /** 
         * Here you can put business logic based on input parameters
         * The logic can be taken out into a separate class for readability
         * The last step is to add the results into the outputMap like this
         * outputMap.put('resultA', 'valueA');
         * outputMap.put('resultB', 'valueB');
         * Output is going to be accessible from Omniscript as well
        */


        /***************************************************/

        OrderItem sourceRecord = [select id from orderItem where id = :recordId];
        TMF687StockManagement generator = new TMF687StockManagement();
        String method = 'POST';
        String operation = 'reserveProductStock';
        String payload = generator.generatePayload(sourceRecord, method, operation, true);


        outputMap.put('result', payload);
        outputMap.put('status', 'SUCCESS');
        outputMap.put('message', null);
    }
}
